name: Build/publish release

on:
  push:
    branches: [ "main" ] 
  pull_request:
    branches: [ "main" ] 
  workflow_dispatch:

jobs:
  publish:
    name: Binary ${{ matrix.target }} (on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
            compress: true
            cargo_flags: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: true
            compress: true
            cargo_flags: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - run: sudo apt install musl-tools
        if: startsWith(matrix.os, 'ubuntu')

      - name: cargo build
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          args: --release --locked
          target: ${{ matrix.target }}

      - name: Compress binaries
        uses: svenstaro/upx-action@v2
        with:
          file: target/${{ matrix.target }}/release/jetbrains-fls-exporter${{ env.EXE }}
          args: --best --lzma
          strip: false  # We're stripping already in Cargo.toml
        if: ${{ matrix.compress }}

      - name: Upload artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ matrix.target }}
          path: target/${{ matrix.target }}/release/jetbrains-fls-exporter${{ env.EXE }}

      - name: Get version from tag
        id: extract_version
        run: |
          echo ::set-output name=version::${GITHUB_REF_NAME#v}
        shell: bash

      - name: Install CHANGELOG parser
        uses: taiki-e/install-action@parse-changelog

      - name: Get CHANGELOG entry
        run: parse-changelog CHANGELOG.md ${{ steps.extract_version.outputs.version }} | tee changelog_entry
        if: startsWith(github.ref_name, 'v') && github.ref_type == 'tag'
        shell: bash

      - name: Read changelog entry from file
        id: changelog_entry
        uses: juliangruber/read-file-action@v1
        with:
          path: ./changelog_entry
        if: startsWith(github.ref_name, 'v') && github.ref_type == 'tag'

      - name: Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.target }}/release/jetbrains-fls-exporter${{ env.EXE }}
          tag: ${{ github.ref_name }}
          asset_name: jetbrains-fls-exporter-${{ steps.extract_version.outputs.version }}-${{ matrix.target }}${{ env.EXE }}
          body: ${{ steps.changelog_entry.outputs.content }}
        if: startsWith(github.ref_name, 'v') && github.ref_type == 'tag'

          #  container-images:
          #    name: Publish images
          #    runs-on: ubuntu-latest
          #    needs: publish
          #    # Run for tags and pushes to the default branch
          #    if: (startsWith(github.ref_name, 'v') && github.ref_type == 'tag') || github.event.repository.default_branch == github.ref_name
          #
          #    steps:
          #      - name: Checkout code
          #        uses: actions/checkout@v5
          #
          #      - name: Download artifact x86_64-unknown-linux-gnu
          #        uses: actions/download-artifact@v3
          #        with:
          #          name: x86_64-unknown-linux-gnu
          #          path: target/x86_64-unknown-linux-gnu/release
          #
          #      - name: Download artifact x86_64-unknown-linux-musl
          #        uses: actions/download-artifact@v3
          #        with:
          #          name: x86_64-unknown-linux-musl
          #          path: target/x86_64-unknown-linux-musl/release
          #
          #      - name: podman login
          #        run: podman login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }} docker.io
          #
          #      - name: podman build linux/amd64
          #        run: podman build --format docker --platform linux/amd64 --manifest miniserve -f Containerfile target/x86_64-unknown-linux-gnu/release

          #      - name: podman manifest push latest
          #        run: podman manifest push miniserve docker.io/svenstaro/miniserve:latest
          #
          #      - name: podman manifest push tag version
          #        run: podman manifest push miniserve docker.io/svenstaro/miniserve:${{ needs.publish.outputs.version }}
          #        if: startsWith(github.ref_name, 'v')

          #      - name: podman build linux/amd64 (alpine edition)
          #        run: podman build --format docker --platform linux/amd64 --manifest miniserve-alpine -f Containerfile.alpine target/x86_64-unknown-linux-musl/release

          #      - name: podman manifest push latest (alpine edition)
          #        run: podman manifest push miniserve-alpine docker.io/svenstaro/miniserve:alpine
          #
          #      - name: podman manifest push tag version (alpine edition)
          #        run: podman manifest push miniserve-alpine docker.io/svenstaro/miniserve:${{ needs.publish.outputs.version }}-alpine
          #        if: startsWith(github.ref_name, 'v')
